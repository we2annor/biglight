{"ast":null,"code":"let images = [];\nconst scrollTop = window.pageYOffset;\nconsole.log(\"images \", images);\n\nconst throttleTimeout = () => {\n  console.log(\"throttle time out called\");\n  setTimeout(timeOut(), 20);\n};\n\nconst load = () => {\n  console.log(\"load called\");\n\n  if (throttleTimeout) {\n    clearTimeout(throttleTimeout);\n  }\n};\n\nconst timeOut = () => {\n  console.log(\"time out called\", images);\n  images.forEach(img => {\n    if (img.offsetTop < window.innerHeight + scrollTop) {\n      img.src = img.dataset.src;\n      img.classList.remove(\"lazy\");\n    }\n  });\n\n  if (images.length === 0) {\n    document.removeEventListener(\"scroll\", load);\n    window.removeEventListener(\"resize\", load);\n    window.removeEventListener(\"orientationChange\", load);\n  }\n};\n\nif (\"IntersectionObserver\" in window) {\n  images = document.querySelectorAll(\"img.lazy\");\n  const imageObserver = new IntersectionObserver((entries, observer) => {\n    console.log(\"intersection observer in window\", images, entries);\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        let image = entry.target;\n        image.src = image.dataset.src;\n        image.classList.remove(\"lazy\");\n        imageObserver.unobserve(image);\n      }\n    });\n  });\n  console.log(\"images in observer\", images);\n  images.forEach(image => {\n    imageObserver.observe(image);\n  });\n} else {\n  throttleTimeout();\n}\n\nconst onDomLoaded = () => {\n  console.log(\"onDomloaded called\");\n  document.addEventListener(\"scroll\", load);\n  window.addEventListener(\"resize\", load);\n  window.addEventListener(\"orientationChange\", load);\n};\n\nexport const lazyLoad = () => {\n  console.log(\"lazy load called\");\n  document.addEventListener(\"DOMContentLoaded\", onDomLoaded());\n};","map":{"version":3,"sources":["/Users/ernest/Desktop/biglight/server/client/src/util/lazy.js"],"names":["images","scrollTop","window","pageYOffset","console","log","throttleTimeout","setTimeout","timeOut","load","clearTimeout","forEach","img","offsetTop","innerHeight","src","dataset","classList","remove","length","document","removeEventListener","querySelectorAll","imageObserver","IntersectionObserver","entries","observer","entry","isIntersecting","image","target","unobserve","observe","onDomLoaded","addEventListener","lazyLoad"],"mappings":"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","sourcesContent":["let images = [];\nconst scrollTop = window.pageYOffset;\nconsole.log(\"images \", images);\n\nconst throttleTimeout = () => {\n  console.log(\"throttle time out called\");\n  setTimeout(timeOut(), 20);\n};\n\nconst load = () => {\n  console.log(\"load called\");\n  if (throttleTimeout) {\n    clearTimeout(throttleTimeout);\n  }\n};\n\nconst timeOut = () => {\n  console.log(\"time out called\", images);\n  images.forEach((img) => {\n    if (img.offsetTop < window.innerHeight + scrollTop) {\n      img.src = img.dataset.src;\n      img.classList.remove(\"lazy\");\n    }\n  });\n  if (images.length === 0) {\n    document.removeEventListener(\"scroll\", load);\n    window.removeEventListener(\"resize\", load);\n    window.removeEventListener(\"orientationChange\", load);\n  }\n};\n\nif (\"IntersectionObserver\" in window) {\n  images = document.querySelectorAll(\"img.lazy\");\n  const imageObserver = new IntersectionObserver((entries, observer) => {\n    console.log(\"intersection observer in window\", images, entries);\n    entries.forEach((entry) => {\n      if (entry.isIntersecting) {\n        let image = entry.target;\n        image.src = image.dataset.src;\n        image.classList.remove(\"lazy\");\n        imageObserver.unobserve(image);\n      }\n    });\n  });\n  console.log(\"images in observer\", images);\n  images.forEach((image) => {\n    imageObserver.observe(image);\n  });\n} else {\n  throttleTimeout();\n}\n\nconst onDomLoaded = () => {\n  console.log(\"onDomloaded called\");\n  document.addEventListener(\"scroll\", load);\n  window.addEventListener(\"resize\", load);\n  window.addEventListener(\"orientationChange\", load);\n};\n\nexport const lazyLoad = () => {\n  console.log(\"lazy load called\");\n  document.addEventListener(\"DOMContentLoaded\", onDomLoaded());\n};\n"]},"metadata":{},"sourceType":"module"}