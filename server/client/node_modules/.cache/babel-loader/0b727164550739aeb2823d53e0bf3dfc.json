{"ast":null,"code":"export const lazyLoad = () => {\n  document.addEventListener(\"DOMContentLoaded\", function () {\n    var lazyloadImages;\n\n    if (\"IntersectionObserver\" in window) {\n      lazyloadImages = document.querySelectorAll(\".lazy\");\n      var imageObserver = new IntersectionObserver(function (entries, observer) {\n        entries.forEach(function (entry) {\n          if (entry.isIntersecting) {\n            var image = entry.target;\n            image.src = image.dataset.src;\n            image.classList.remove(\"lazy\");\n            imageObserver.unobserve(image);\n          }\n        });\n      });\n      lazyloadImages.forEach(function (image) {\n        imageObserver.observe(image);\n      });\n    } else {\n      var lazyloadThrottleTimeout;\n      lazyloadImages = document.querySelectorAll(\".lazy\");\n\n      function lazyload() {\n        if (lazyloadThrottleTimeout) {\n          clearTimeout(lazyloadThrottleTimeout);\n        }\n\n        lazyloadThrottleTimeout = setTimeout(function () {\n          var scrollTop = window.pageYOffset;\n          lazyloadImages.forEach(function (img) {\n            if (img.offsetTop < window.innerHeight + scrollTop) {\n              img.src = img.dataset.src;\n              img.classList.remove(\"lazy\");\n            }\n          });\n\n          if (lazyloadImages.length === 0) {\n            document.removeEventListener(\"scroll\", lazyload);\n            window.removeEventListener(\"resize\", lazyload);\n            window.removeEventListener(\"orientationChange\", lazyload);\n          }\n        }, 20);\n      }\n\n      document.addEventListener(\"scroll\", lazyload);\n      window.addEventListener(\"resize\", lazyload);\n      window.addEventListener(\"orientationChange\", lazyload);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/ernest/Desktop/biglight/server/client/src/util/lazy.js"],"names":["lazyLoad","document","addEventListener","lazyloadImages","window","querySelectorAll","imageObserver","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","image","target","src","dataset","classList","remove","unobserve","observe","lazyloadThrottleTimeout","lazyload","clearTimeout","setTimeout","scrollTop","pageYOffset","img","offsetTop","innerHeight","length","removeEventListener"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,MAAM;AAC5BC,EAAAA,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,YAAY;AACxD,QAAIC,cAAJ;;AAEA,QAAI,0BAA0BC,MAA9B,EAAsC;AACpCD,MAAAA,cAAc,GAAGF,QAAQ,CAACI,gBAAT,CAA0B,OAA1B,CAAjB;AACA,UAAIC,aAAa,GAAG,IAAIC,oBAAJ,CAAyB,UAC3CC,OAD2C,EAE3CC,QAF2C,EAG3C;AACAD,QAAAA,OAAO,CAACE,OAAR,CAAgB,UAAUC,KAAV,EAAiB;AAC/B,cAAIA,KAAK,CAACC,cAAV,EAA0B;AACxB,gBAAIC,KAAK,GAAGF,KAAK,CAACG,MAAlB;AACAD,YAAAA,KAAK,CAACE,GAAN,GAAYF,KAAK,CAACG,OAAN,CAAcD,GAA1B;AACAF,YAAAA,KAAK,CAACI,SAAN,CAAgBC,MAAhB,CAAuB,MAAvB;AACAZ,YAAAA,aAAa,CAACa,SAAd,CAAwBN,KAAxB;AACD;AACF,SAPD;AAQD,OAZmB,CAApB;AAcAV,MAAAA,cAAc,CAACO,OAAf,CAAuB,UAAUG,KAAV,EAAiB;AACtCP,QAAAA,aAAa,CAACc,OAAd,CAAsBP,KAAtB;AACD,OAFD;AAGD,KAnBD,MAmBO;AACL,UAAIQ,uBAAJ;AACAlB,MAAAA,cAAc,GAAGF,QAAQ,CAACI,gBAAT,CAA0B,OAA1B,CAAjB;;AAEA,eAASiB,QAAT,GAAoB;AAClB,YAAID,uBAAJ,EAA6B;AAC3BE,UAAAA,YAAY,CAACF,uBAAD,CAAZ;AACD;;AAEDA,QAAAA,uBAAuB,GAAGG,UAAU,CAAC,YAAY;AAC/C,cAAIC,SAAS,GAAGrB,MAAM,CAACsB,WAAvB;AACAvB,UAAAA,cAAc,CAACO,OAAf,CAAuB,UAAUiB,GAAV,EAAe;AACpC,gBAAIA,GAAG,CAACC,SAAJ,GAAgBxB,MAAM,CAACyB,WAAP,GAAqBJ,SAAzC,EAAoD;AAClDE,cAAAA,GAAG,CAACZ,GAAJ,GAAUY,GAAG,CAACX,OAAJ,CAAYD,GAAtB;AACAY,cAAAA,GAAG,CAACV,SAAJ,CAAcC,MAAd,CAAqB,MAArB;AACD;AACF,WALD;;AAMA,cAAIf,cAAc,CAAC2B,MAAf,KAA0B,CAA9B,EAAiC;AAC/B7B,YAAAA,QAAQ,CAAC8B,mBAAT,CAA6B,QAA7B,EAAuCT,QAAvC;AACAlB,YAAAA,MAAM,CAAC2B,mBAAP,CAA2B,QAA3B,EAAqCT,QAArC;AACAlB,YAAAA,MAAM,CAAC2B,mBAAP,CAA2B,mBAA3B,EAAgDT,QAAhD;AACD;AACF,SAbmC,EAajC,EAbiC,CAApC;AAcD;;AAEDrB,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,QAA1B,EAAoCoB,QAApC;AACAlB,MAAAA,MAAM,CAACF,gBAAP,CAAwB,QAAxB,EAAkCoB,QAAlC;AACAlB,MAAAA,MAAM,CAACF,gBAAP,CAAwB,mBAAxB,EAA6CoB,QAA7C;AACD;AACF,GAnDD;AAoDD,CArDM","sourcesContent":["export const lazyLoad = () => {\n  document.addEventListener(\"DOMContentLoaded\", function () {\n    var lazyloadImages;\n\n    if (\"IntersectionObserver\" in window) {\n      lazyloadImages = document.querySelectorAll(\".lazy\");\n      var imageObserver = new IntersectionObserver(function (\n        entries,\n        observer\n      ) {\n        entries.forEach(function (entry) {\n          if (entry.isIntersecting) {\n            var image = entry.target;\n            image.src = image.dataset.src;\n            image.classList.remove(\"lazy\");\n            imageObserver.unobserve(image);\n          }\n        });\n      });\n\n      lazyloadImages.forEach(function (image) {\n        imageObserver.observe(image);\n      });\n    } else {\n      var lazyloadThrottleTimeout;\n      lazyloadImages = document.querySelectorAll(\".lazy\");\n\n      function lazyload() {\n        if (lazyloadThrottleTimeout) {\n          clearTimeout(lazyloadThrottleTimeout);\n        }\n\n        lazyloadThrottleTimeout = setTimeout(function () {\n          var scrollTop = window.pageYOffset;\n          lazyloadImages.forEach(function (img) {\n            if (img.offsetTop < window.innerHeight + scrollTop) {\n              img.src = img.dataset.src;\n              img.classList.remove(\"lazy\");\n            }\n          });\n          if (lazyloadImages.length === 0) {\n            document.removeEventListener(\"scroll\", lazyload);\n            window.removeEventListener(\"resize\", lazyload);\n            window.removeEventListener(\"orientationChange\", lazyload);\n          }\n        }, 20);\n      }\n\n      document.addEventListener(\"scroll\", lazyload);\n      window.addEventListener(\"resize\", lazyload);\n      window.addEventListener(\"orientationChange\", lazyload);\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}