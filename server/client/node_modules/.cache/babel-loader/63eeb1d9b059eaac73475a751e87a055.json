{"ast":null,"code":"var _jsxFileName = \"/Users/ernest/Desktop/biglight/server/client/src/util/lazyLoad/LazyLoad.jsx\";\nimport React, { useState, useEffect } from \"react\";\nexport const LazyLoad = ({\n  src,\n  alt,\n  placeholder,\n  data,\n  srcSet,\n  size,\n  classname\n}) => {\n  const [imageSrc, setImageSrc] = useState(placeholder);\n  const [imageRef, setImageRef] = useState(\"\");\n\n  const onLoad = event => {\n    event.target.classList.add(\"loaded\");\n  };\n\n  const onError = event => {\n    event.target.classList.add(\"has-error\");\n  };\n\n  useEffect(() => {\n    let observer;\n    let didCancel = false;\n\n    if (imageRef && imageSrc !== src) {\n      if (IntersectionObserver) {\n        observer = new IntersectionObserver(entries => {\n          entries.forEach(entry => {\n            if (!didCancel && (entry.intersectionRatio > 0 || entry.isIntersecting)) {\n              setImageSrc(src);\n              observer.unobserve(imageRef);\n            }\n          });\n        }, {\n          threshold: 0.01,\n          rootMargin: \"75%\"\n        });\n        observer.observe(imageRef);\n      } else {\n        setImageSrc(src);\n      }\n    }\n\n    return () => {\n      didCancel = true;\n\n      if (observer && observer.unobserve) {\n        observer.unobserve(imageRef);\n      }\n    };\n  }, [src, imageSrc, imageRef]);\n  return /*#__PURE__*/React.createElement(\"img\", {\n    ref: setImageRef,\n    src: imageSrc,\n    alt: alt,\n    onLoad: onLoad,\n    onError: onError,\n    srcSet: srcSet,\n    size: size,\n    className: classname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["/Users/ernest/Desktop/biglight/server/client/src/util/lazyLoad/LazyLoad.jsx"],"names":["React","useState","useEffect","LazyLoad","src","alt","placeholder","data","srcSet","size","classname","imageSrc","setImageSrc","imageRef","setImageRef","onLoad","event","target","classList","add","onError","observer","didCancel","IntersectionObserver","entries","forEach","entry","intersectionRatio","isIntersecting","unobserve","threshold","rootMargin","observe"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AACvBC,EAAAA,GADuB;AAEvBC,EAAAA,GAFuB;AAGvBC,EAAAA,WAHuB;AAIvBC,EAAAA,IAJuB;AAKvBC,EAAAA,MALuB;AAMvBC,EAAAA,IANuB;AAOvBC,EAAAA;AAPuB,CAAD,KAQlB;AACJ,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAACK,WAAD,CAAxC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMc,MAAM,GAAIC,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBC,GAAvB,CAA2B,QAA3B;AACD,GAFD;;AAIA,QAAMC,OAAO,GAAIJ,KAAD,IAAW;AACzBA,IAAAA,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBC,GAAvB,CAA2B,WAA3B;AACD,GAFD;;AAIAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,QAAJ;AACA,QAAIC,SAAS,GAAG,KAAhB;;AAEA,QAAIT,QAAQ,IAAIF,QAAQ,KAAKP,GAA7B,EAAkC;AAChC,UAAImB,oBAAJ,EAA0B;AACxBF,QAAAA,QAAQ,GAAG,IAAIE,oBAAJ,CACRC,OAAD,IAAa;AACXA,UAAAA,OAAO,CAACC,OAAR,CAAiBC,KAAD,IAAW;AACzB,gBACE,CAACJ,SAAD,KACCI,KAAK,CAACC,iBAAN,GAA0B,CAA1B,IAA+BD,KAAK,CAACE,cADtC,CADF,EAGE;AACAhB,cAAAA,WAAW,CAACR,GAAD,CAAX;AACAiB,cAAAA,QAAQ,CAACQ,SAAT,CAAmBhB,QAAnB;AACD;AACF,WARD;AASD,SAXQ,EAYT;AACEiB,UAAAA,SAAS,EAAE,IADb;AAEEC,UAAAA,UAAU,EAAE;AAFd,SAZS,CAAX;AAiBAV,QAAAA,QAAQ,CAACW,OAAT,CAAiBnB,QAAjB;AACD,OAnBD,MAmBO;AACLD,QAAAA,WAAW,CAACR,GAAD,CAAX;AACD;AACF;;AACD,WAAO,MAAM;AACXkB,MAAAA,SAAS,GAAG,IAAZ;;AACA,UAAID,QAAQ,IAAIA,QAAQ,CAACQ,SAAzB,EAAoC;AAClCR,QAAAA,QAAQ,CAACQ,SAAT,CAAmBhB,QAAnB;AACD;AACF,KALD;AAMD,GAlCQ,EAkCN,CAACT,GAAD,EAAMO,QAAN,EAAgBE,QAAhB,CAlCM,CAAT;AAoCA,sBACE;AACE,IAAA,GAAG,EAAEC,WADP;AAEE,IAAA,GAAG,EAAEH,QAFP;AAGE,IAAA,GAAG,EAAEN,GAHP;AAIE,IAAA,MAAM,EAAEU,MAJV;AAKE,IAAA,OAAO,EAAEK,OALX;AAME,IAAA,MAAM,EAAEZ,MANV;AAOE,IAAA,IAAI,EAAEC,IAPR;AAQE,IAAA,SAAS,EAAEC,SARb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAYD,CApEM","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport const LazyLoad = ({\n  src,\n  alt,\n  placeholder,\n  data,\n  srcSet,\n  size,\n  classname,\n}) => {\n  const [imageSrc, setImageSrc] = useState(placeholder);\n  const [imageRef, setImageRef] = useState(\"\");\n\n  const onLoad = (event) => {\n    event.target.classList.add(\"loaded\");\n  };\n\n  const onError = (event) => {\n    event.target.classList.add(\"has-error\");\n  };\n\n  useEffect(() => {\n    let observer;\n    let didCancel = false;\n\n    if (imageRef && imageSrc !== src) {\n      if (IntersectionObserver) {\n        observer = new IntersectionObserver(\n          (entries) => {\n            entries.forEach((entry) => {\n              if (\n                !didCancel &&\n                (entry.intersectionRatio > 0 || entry.isIntersecting)\n              ) {\n                setImageSrc(src);\n                observer.unobserve(imageRef);\n              }\n            });\n          },\n          {\n            threshold: 0.01,\n            rootMargin: \"75%\",\n          }\n        );\n        observer.observe(imageRef);\n      } else {\n        setImageSrc(src);\n      }\n    }\n    return () => {\n      didCancel = true;\n      if (observer && observer.unobserve) {\n        observer.unobserve(imageRef);\n      }\n    };\n  }, [src, imageSrc, imageRef]);\n\n  return (\n    <img\n      ref={setImageRef}\n      src={imageSrc}\n      alt={alt}\n      onLoad={onLoad}\n      onError={onError}\n      srcSet={srcSet}\n      size={size}\n      className={classname}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}